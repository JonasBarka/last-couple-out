@page "/settings"
@using Infrastructure.Repository
@using Infrastructure.Dto
@inject IAttendeeRepository _attendeeRepository
@inject IScoreRepository _scoreRepository
@inject DialogService _dialogService

<PageTitle>Last Couple Out</PageTitle>

<div class="container-md">
    <br />
    <h1>Settings</h1>
    <br />
    <RadzenButton Text="Delete all scores" ButtonStyle="ButtonStyle.Secondary" Click=@DeleteScores />
    <br />
    <br />
    <RadzenButton Text="Delete all attendees and scores" ButtonStyle="ButtonStyle.Secondary" Click=@DeleteAll />
    <br />
    <br />
    <RadzenButton Text="Add test data" ButtonStyle="ButtonStyle.Secondary" Click=@AddTestData />
</div>

@code
{
    async Task DeleteScores()
    {
        var deleteAll = await _dialogService.Alert("Are you sure you want to delete all scores?", "Delete all scores", new AlertOptions() { OkButtonText = "Yes" });

        if (deleteAll == true)
        {
            await _scoreRepository.ClearAsync();
        }
    }

    async Task DeleteAll()
    {
        var deleteAll = await _dialogService.Alert("Are you sure you want to delete all attendees and scores?", "Delete all attendees and scores", new AlertOptions() { OkButtonText = "Yes" });

        if (deleteAll == true)
        {
            await _scoreRepository.ClearAsync();
            await _attendeeRepository.ClearAsync();
        }
    }

    async Task AddTestData()
    {
        var deleteAll = await _dialogService.Alert("Are you sure you want to add test data? This will delete all current data.", "Add test data", new AlertOptions() { OkButtonText = "Yes" });

        if (deleteAll == true)
        {
            await _scoreRepository.ClearAsync();
            await _attendeeRepository.ClearAsync();

            List<AttendeeDto> attendees =
            [
                new()
                {
                    Id = 1,
                    FirstName = "Adam",
                    LastName = "Atkins"
                },
                new()
                {
                    Id = 2,
                    FirstName = "Ben",
                    LastName = "Bowden"
                },
                new()
                {
                    Id = 3,
                    FirstName = "Cindy",
                    LastName = "Calgary"
                },
                new()
                {
                    Id = 4,
                    FirstName = "David",
                    LastName = "Dumprey"
                },
                new()
                {
                    Id = 5,
                    FirstName = "Eleonora",
                    LastName = "Evans"
                },
                new()
                {
                    Id = 6,
                    FirstName = "Fredric",
                    LastName = "Faulkener"
                }
            ];

            await _attendeeRepository.SaveAsync(attendees);

            List<ScoreDto> scores =
            [
                new()
                {
                    Id = 1,
                    ScorerId = 1,
                    ScoredId = 2,
                    Friendship = 1,
                    Attraction = 5,
                    Parenting = 2
                },
                new()
                {
                    Id = 2,
                    ScorerId = 2,
                    ScoredId = 1,
                    Friendship = 4,
                    Attraction = 1,
                    Parenting = 3
                },
                new()
                {
                    Id = 3,
                    ScorerId = 3,
                    ScoredId = 4,
                    Friendship = 3,
                    Attraction = 4,
                    Parenting = 2
                },
                new()
                {
                    Id = 4,
                    ScorerId = 4,
                    ScoredId = 3,
                    Friendship = 2,
                    Attraction = 5,
                    Parenting = 2
                },
                new()
                {
                    Id = 5,
                    ScorerId = 5,
                    ScoredId = 6,
                    Friendship = 2,
                    Attraction = 3,
                    Parenting = 3
                },
                new()
                {
                    Id = 6,
                    ScorerId = 6,
                    ScoredId = 5,
                    Friendship = 4,
                    Attraction = 1,
                    Parenting = 3
                }
            ];

            await _scoreRepository.SaveAsync(scores);
        }
    }
}
