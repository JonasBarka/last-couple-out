@page "/attendees"
@using Infrastructure.Dto
@using Infrastructure.Repository
@inject IAttendeeRepository _attendeeRepository

<PageTitle>Last Couple Out</PageTitle>

<div class="container-md">
    <br />
    <h1>Attendees</h1>
    <br />

    <div class="row">
        <div class="col-xxl-6 col-xl-8">
            <RadzenTemplateForm TItem="AttendeeDto" Data=@attendeeToCreate Submit=@OnSubmitCreate InvalidSubmit=@OnInvalidSubmit>
                <RadzenFieldset Text="Add new attendee">
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="First Name" />
                            <small style="display: block">(2-30 characters)</small>
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="FirstName" @bind-Value=@attendeeToCreate.FirstName class="w-100" />
                            <RadzenLengthValidator Component="FirstName" Min="2" Text="First name should be at least 2 characters" Style="position: absolute" />
                            <RadzenLengthValidator Component="FirstName" Max="30" Text="First name should be at most 30 characters" Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="Last Name" />
                            <small style="display: block">(2-30 characters)</small>
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="LastName" @bind-Value=@attendeeToCreate.LastName class="w-100" />
                            <RadzenLengthValidator Component="LastName" Min="2" Text="Last name should be at least 2 characters" Style="position: absolute" />
                            <RadzenLengthValidator Component="LastName" Max="30" Text="Last name should be at most 30 characters" Style="position: absolute" />
                        </div>
                    </div>
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Add attendee"></RadzenButton>
                </RadzenFieldset>
            </RadzenTemplateForm>
        </div>
    </div>

    <br />
    <br />

    <div class="col-xxl-6 col-xl-8">
        <div class="col">
            <RadzenDataGrid @ref="attendeesGrid" Data="@attendees" TItem="AttendeeDto" AllowSorting="true">
                <Columns>
                    <RadzenDataGridColumn TItem="AttendeeDto" Property="Id" Title="Id" Frozen="true" Width="16px" />
                    <RadzenDataGridColumn TItem="AttendeeDto" Property="FirstName" Title="First Name" Width="60px" />
                    <RadzenDataGridColumn TItem="AttendeeDto" Property="LastName" Title="Last Name" Width="60px" />
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>

    <br />
    <br />

    <div class="row">
        <div class="col-xxl-6 col-xl-8">
            <RadzenTemplateForm TItem="AttendeeDto" Data=@attendeeToUpdate Submit=@OnSubmitUpdate InvalidSubmit=@OnInvalidSubmit>
                <RadzenFieldset Text="Update attendee name">
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="Id" />
                            <small style="display: block">(1-100)</small>
                        </div>
                        <div class="col">
                            <RadzenNumeric style="display: block" Name="Id" @bind-Value=@attendeeToUpdate.Id class="w-100" ShowUpDown="false" />
                            <RadzenNumericRangeValidator Component="Id" Min="1" Max="100" Text="Id should be between 1 and 100" Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="First Name" />
                            <small style="display: block">(2-30 characters)</small>
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="FirstName" @bind-Value=@attendeeToUpdate.FirstName class="w-100" />
                            <RadzenLengthValidator Component="FirstName" Min="2" Text="First name should be at least 2 characters" Style="position: absolute" />
                            <RadzenLengthValidator Component="FirstName" Max="30" Text="First name should be at most 30 characters" Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4">
                            <RadzenLabel Text="Last Name" />
                            <small style="display: block">(2-30 characters)</small>
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="LastName" @bind-Value=@attendeeToUpdate.LastName class="w-100" />
                            <RadzenLengthValidator Component="LastName" Min="2" Text="Last name should be at least 2 characters" Style="position: absolute" />
                            <RadzenLengthValidator Component="LastName" Max="30" Text="Last name should be at most 30 characters" Style="position: absolute" />
                        </div>
                    </div>
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Update attendee"></RadzenButton>
                </RadzenFieldset>
            </RadzenTemplateForm>
        </div>
    </div>
</div>

@code {

    AttendeeDto attendeeToCreate = new(); // Only used to temporarily hold form content.
    AttendeeDto attendeeToUpdate = new(); // Only used to temporarily hold form content.

    RadzenDataGrid<AttendeeDto> attendeesGrid = new();

    List<AttendeeDto> attendees = new();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        attendees = await _attendeeRepository.LoadAsync();
    }

    async Task OnSubmitCreate(AttendeeDto attendee)
    {
        attendees.Add(new(attendees.Count + 1, attendee.FirstName, attendee.LastName));

        await _attendeeRepository.SaveAsync(attendees);

        await attendeesGrid.Reload();

        attendee.Reset();
    }

    async Task OnSubmitUpdate(AttendeeDto attendee)
    {
        var updatedAttendee = attendees.First(x => x.Id == attendee.Id);

        updatedAttendee.FirstName = attendee.FirstName;
        updatedAttendee.LastName = attendee.LastName;

        await _attendeeRepository.SaveAsync(attendees);

        await attendeesGrid.Reload();

        attendee.Reset();
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
    }
}
